function DTA_plots(savelocation,summarieslocation)
% ------------------------------------------------------------------------
%                           FILE INFORMATION
% ------------------------------------------------------------------------
% File Name:      DTA_summaries_plots.m
% Created By:     Rebecca Frederick
% Date Created:   16 May 2025
% Modified By:    Rebecca Frederick
% Date Modified:  10 June 2025
%
% FILE OPERATION:
% Summarizes CSC and |Z| and OCP values accross multiple files.
% Use to group by electrode, device, animal, electrolyte, etc.
% 
% ------------------------------------------------------------------------
%clear all
%clc
% ------------------------------------------------------------------------
%{
% UPDATE LOG
% 
% Update 2025-06-10 (RAF)
%   - [to-do] plot overlay all electrodes by looping through 
%     masterDTA structure
% 
% Update 2025-05-29 (RAF)
%   - added code to load, plot, and save data from table generated by
%     DTA_summaries function.
%   - moved other code & notes to new function: DTA_plots_multDevices
% 
% Update 2025-05-27 by Rebecca Frederick (RAF)
%   - Added comments with general structure for each code section.
%     ask user for file location(s), read test type from each file, 
%     add data into new summary tables by testType, plot data, save plots.
% 
% 
%}
% ------------------------------------------------------------------------
% ------------------------------------------------------------------------
% List All .mat Files Within Selected Folder:
nameStructs = dir(sprintf('%s%s',savelocation,'\*.mat')); % all structures in save location
% ------------------------------------------------------------------------
%% Plot OCP Data
ocp_sum_file = fullfile(summarieslocation,'summary_OCPavg.mat');
%
if isfile(ocp_sum_file)==0
    % skip if no OCP data/summary file is present.
else
    load(ocp_sum_file)
    OCPx = summary_OCPavg.ElectrodeID(1:end-2);
    OCPy = summary_OCPavg.OCP(1:end-2);
    OCPxavg = summary_OCPavg.ElectrodeID(end-1);
    OCPyavg = summary_OCPavg.OCP(end-1);
    OCPystd = summary_OCPavg.OCP(end);
    %
    OCPfig = figure;
    figure(OCPfig)
    hold on
    plot(OCPx,OCPy,'.b','MarkerSize',20);
    errorbar(OCPxavg,OCPyavg,OCPystd,'sk','MarkerSize',15,'LineWidth',2)
    grid on
    ylabel("Open Circuit Potential, mV");
    title(sprintf('Device %s %s',string(summary_OCPavg.DeviceID(1)),string(summary_OCPavg.Date(1))));
    %xlim('auto')
    ylim('auto')
    xlim([categorical(OCPxavg), categorical(OCPx(end))])
    hold off
    %
    saveas(OCPfig,fullfile(summarieslocation,'summaryOCP.png'))
end
% ------------------------------------------------------------------------
%% Plot |Z| Data
eis_sum_file = fullfile(summarieslocation,'summary_EISavg.mat');
if isfile(eis_sum_file)==0
    % skip if no EIS data/summary file is present.
else
    load(eis_sum_file)
    Zx = summary_EISavg.ElectrodeID(1:end-2);
    Zy = summary_EISavg.ImpedanceMag(1:end-2);
    Zxavg = summary_EISavg.ElectrodeID(end-1);
    Zyavg = summary_EISavg.ImpedanceMag(end-1);
    Zystd = summary_EISavg.ImpedanceMag(end);
    %
    Zfig = figure;
    figure(Zfig)
    hold on
    plot(Zx,Zy,'.b','MarkerSize',20);
    errorbar(Zxavg,Zyavg,Zystd,'sk','MarkerSize',15,'LineWidth',2);
    grid on
    ylabel("Impedance |Z|, Ohm");
    title(sprintf('Device %s %s',string(summary_EISavg.DeviceID(1)),string(summary_EISavg.Date(1))));
    %xlim('auto')
    ylim('auto')
    xlim([categorical(Zxavg), categorical(Zx(end))])
    hold off
    %
    saveas(Zfig,fullfile(summarieslocation,'summaryZ.png'))
end
% ------------------------------------------------------------------------
%% Plot CSC Data
%{ 
cv_sum_file = fullfile(summarieslocation,'summary_CVavg.mat')
if isfile(cv_sum_file)==0
    % skip if no CV data/summary file is present.
else
    load(cv_sum_file)

IN PROGRESS:
NEED TO SPLIT DATA BY SCAN RATE, THEN OVERLAY EACH DATA SET ON ONE PLOT
    % Split data by scan rate
    uniqueScanRates = unique(summary_CVavg.ScanRate);
    hold on; % Hold on to overlay plots

    % Loop through each unique scan rate and plot the corresponding data
    for i = 1:length(uniqueScanRates)
        currentRate = uniqueScanRates(i);
        % Extract data for the current scan rate
        currentData = summary_CVavg(summary_CVavg.ScanRate == currentRate, :);
        
        % Plot the data for the current scan rate
        scatter(currentData.ElectrodeID, currentData.CSCc, 'filled', 'DisplayName', sprintf('Scan Rate: %.2f', currentRate));
    end

    hold off; % Release the hold on the current figure
    grid on;
    ylabel("Current, A");
    title(sprintf('Cyclic Voltammetry Data Overlay for Device %s %s', string(summary_CVavg.DeviceID(1)), string(summary_CVavg.Date(1))));
    legend show; % Show legend for scan rates



%CSCfig = scatter(tbl,'ElectrodeID','CSCc','filled','ColorVariable','ScanRate');
CSCx = summary_CVavg.ElectrodeID;
CSCcy = summary_CVavg.CSCc;
CSCay = summary_CVavg.CSCa;
datalabels = summary_CVavg.ScanRate;
CSCfig = scatter(CSCx,[CSCcy,CSCay],"filled")
CSCfig.ColorVariable = "ScanRate";
saveas(CSCfig,fullfile(summarieslocation,'summaryCSC.png'))
legend("Cathodic","Anodic")
end
%}
% ------------------------------------------------------------------------
%                             END OF FILE
% ------------------------------------------------------------------------